plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'checkstyle'
    id 'idea'
}

group = 'com.crosby'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    test {
        groovy {
            srcDir file("src/test/groovy")
        }
    }
    integration {
        groovy {
            compileClasspath += main.output
            compileClasspath += main.compileClasspath
            compileClasspath += test.output
            compileClasspath += test.compileClasspath
            runtimeClasspath += test.runtimeClasspath
            srcDir file("src/integration/groovy")
        }
        resources.srcDir file("src/integration/resources")
    }
}

idea {
    module {
        testSourceDirs += project.sourceSets.integration.groovy.srcDirs
        testSourceDirs += project.sourceSets.integration.resources.srcDirs
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation "org.testcontainers:postgresql:1.13.0"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

checkstyle {
    configFile = new File(rootDir, "checkstyle.xml")
    sourceSets = [project.sourceSets.main, project.sourceSets.test]
}
checkstyleMain.source = "src/main/java"

def testExcludeList = [
        'com/crosby/**/domain/*',
        'com/crosby/CrosbyApiApplication*'
]

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: testExcludeList)
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: testExcludeList)
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 0.97
            }
        }
    }
}

task integration(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    useJUnit {
        include "**/*IT.class"
    }
    testLogging.showStandardStreams = false

    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
